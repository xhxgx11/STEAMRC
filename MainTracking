import cv2
import sys
import numpy as np
import datetime
import RPi.GPIO as GPIO
from gpiozero import Servo
from time import sleep
from gpiozero.pins.pigpio import PiGPIOFactory

factory = PiGPIOFactory()

servo = Servo(2, pin_factory=factory)


(major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')
 
print('PLEASE FOR THE LOVE OF GOD WORK')

def SetAngle(angle):
    
    print(angle)
    servo.value=(angle/180)
    sleep(0.04)

if __name__ == '__main__' :
    
    
 
    # Set up tracker.
    # Instead of MIL, you can also use
 
    tracker_types = ['BOOSTING', 'MIL','KCF', 'TLD', 'MEDIANFLOW', 'GOTURN', 'MOSSE', 'CSRT']
    tracker_type = tracker_types[2] #changes type of tracker
 
    if int(minor_ver) < 3:
        tracker = cv2.Tracker_create(tracker_type)
    else:
        if tracker_type == 'BOOSTING':
            tracker = cv2.TrackerBoosting_create()
        if tracker_type == 'MIL':
            tracker = cv2.TrackerMIL_create()
        if tracker_type == 'KCF':
            tracker = cv2.TrackerKCF_create()
        if tracker_type == 'TLD':
            tracker = cv2.TrackerTLD_create()
        if tracker_type == 'MEDIANFLOW':
            tracker = cv2.TrackerMedianFlow_create()
        if tracker_type == 'GOTURN':
            tracker = cv2.TrackerGOTURN_create()
        if tracker_type == 'MOSSE':
            tracker = cv2.TrackerMOSSE_create()
        if tracker_type == "CSRT":
            tracker = cv2.TrackerCSRT_create()
 
    # Read video
video = cv2.VideoCapture(0)
video.set(3, 160) # set horiz resolution
video.set(4, 120) # set vert res
 
    # Exit if video not opened.
if not video.isOpened():
        print ("Could not start webcam")
        sys.exit()
 
    # Read first frame.
ok, frame = video.read()
if not ok:
        print ('Webcam not Found')
        sys.exit()
     
    # Define an initial bounding box
bbox = (287, 23, 86, 320)
 
    # Uncomment the line below to select a different bounding box
bbox = cv2.selectROI(frame, False)
 
    # Initialize tracker with first frame and bounding box
ok = tracker.init(frame, bbox)
 
while True:
        # Read a new frame
        ok, frame = video.read()
        if not ok:
            break
         
        # Start timer
        timer = cv2.getTickCount()
 
        # Update tracker
        ok, bbox = tracker.update(frame)
 
        # Calculate Frames per second (FPS)
        fps = cv2.getTickFrequency() / (cv2.getTickCount() - timer);
 
        # Draw bounding box
        if ok:
            # Tracking success
            p1 = (int(bbox[0]), int(bbox[1]))
            p2 = (int(bbox[0] + bbox[2]), int(bbox[1] + bbox[3]))
            p3 = (int(bbox[0]))
            cv2.rectangle(frame, p1, p2, (255,0,0), 2, 1)
            print(p3)
            SetAngle(p3)
            
        else :
            # Tracking failure
            cv2.putText(frame, "Tracking failure detected", (10,80), cv2.FONT_HERSHEY_SIMPLEX, 0.25,(0,0,255),2)
 
        # Display tracker type on frame
        cv2.putText(frame, tracker_type + " Tracker", (100,20), cv2.FONT_HERSHEY_SIMPLEX, 0.25, (50,170,50),2);
     
        # Display FPS on frame
        cv2.putText(frame, "FPS : " + str(int(fps)), (50,50), cv2.FONT_HERSHEY_SIMPLEX, 0.25, (50,170,50), 2);
 
        # Display result
        cv2.imshow('Tracking',frame)
        #head_angle = remap(float(x+(float(w)/2.0)), IN_MIN,IN_MAX,OUT_MIN,OUT_MAX)
        #print('x: ' + str(x) + ', head: ' + str(head_angle))("Tracking", frame)
        
        # Exit if ESC pressed
        k = cv2.waitKey(1) & 0xff
        if k == 27 : break
         
